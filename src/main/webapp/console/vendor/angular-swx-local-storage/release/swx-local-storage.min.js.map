{"version":3,"sources":["swx-local-storage.js"],"names":["angular","$localStorage","$window","$location","$cacheFactory","webStorage","prefix","host","substring","indexOf","oneDay","cache","service","this","isLocalStorageAvailable","val","destroy","put","key","value","dataToStore","data","arguments","length","isNumber","expires","Date","getTime","setItem","toJson","get","item","fromJson","getItem","remove","removeItem","empty","clear","removeAll","localStorage","Math","round","random","e","$inject","module","window"],"mappings":"CAAA,SAAUA,GAEN,YA+BA,SAASC,GAAcC,EAASC,EAAWC,GAOvC,GACIC,GADAC,EAASH,EAAUI,OAAOC,UAAU,EAAGL,EAAUI,OAAOE,QAAQ,MAAQ,IAExEC,EAAS,MACTC,EAAQP,EAAcE,EAAS,SAC/BM,EAAUC,KACVC,GAA0B,CAmB9BF,GAAQN,OAAS,SAASS,GACtBT,EAASS,EAAM,IACfJ,EAAMK,UACNL,EAAQP,EAAcE,EAAS,UAmBnCM,EAAQK,IAAM,SAASC,EAAKC,GAExB,GAAIC,IAAgBC,KAAMF,EAY1B,OAVIG,WAAUC,OAAS,GAAKvB,EAAQwB,SAASF,UAAU,MACnDF,EAAYK,SAAU,GAAIC,OAAOC,UAAaL,UAAU,GAAKZ,GAGjEC,EAAMM,IAAIC,EAAKE,GAEXN,GACAT,EAAWuB,QAAQtB,EAASY,EAAKlB,EAAQ6B,OAAOT,GAAa,IAG1DD,GAkBXP,EAAQkB,IAAM,SAASZ,GAEnB,GAAIa,EASJ,OAPIpB,GAAMmB,IAAIZ,GACVa,EAAOpB,EAAMmB,IAAIZ,GAEZJ,IACLiB,EAAO/B,EAAQgC,SAAS3B,EAAW4B,QAAQ3B,EAASY,KAGnDa,EAIDA,EAAKN,SAAWM,EAAKN,SAAU,GAAIC,OAAOC,cAC1Cf,GAAQsB,OAAOhB,IAInBP,EAAMM,IAAIC,EAAKa,GAERA,EAAKV,MAXZ,QA4BJT,EAAQsB,OAAS,SAAShB,GACtBN,EAAQK,IAAIC,EAAK,QACbJ,GACAT,EAAW8B,WAAW7B,EAASY,GAEnCP,EAAMuB,OAAOhB,IAejBN,EAAQwB,MAAQ,WACRtB,GACAT,EAAWgC,QAEf1B,EAAM2B,aAQV,WAGI,IACIjC,EAAaH,EAAQqC,YACrB,IAAIrB,GAAM,WAAasB,KAAKC,MAAsB,IAAhBD,KAAKE,SACvCrC,GAAWuB,QAAQV,EAAK,QACxBb,EAAW8B,WAAWjB,GAE1B,MAAOyB,GACH7B,GAA0B,MAvKtCb,EAAc2C,SAAW,UAAW,YAAa,iBAsLjD5C,EACK6C,OAAO,sBACPjC,QAAQ,gBAAiBX,IAE/B6C,OAAO9C","file":"swx-local-storage.min.js","sourcesContent":["(function(angular) {\n\n    'use strict';\n\n    /**\n     * @ngdoc service\n     * @name $localStorage\n     *\n     * @requires $window\n     * @requires $location\n     * @requires $cacheFactory\n     *\n     * @description Provides a key-value (string-object) storage, that is backed by localStorage with support for expiry (in days).\n     * Objects put or retrieved from this storage are automatically serialized or deserialized by angular's toJson/fromJson.\n     *\n     * @param {service} $window The $window service.\n     * @param {service} $location The $location service.\n     * @param {service} $cacheFactory The $cacheFactory service.\n     *\n     * @example\n     * ```js\n     * myApp.$inject = ['$localStorage'];\n     * function myApp($localStorage) {\n   *   // Your app code...\n   * }\n     *\n     * angular\n     *   .module('myApp', ['swxLocalStorage']);\n     * ```\n     *\n     * @ngInject\n     */\n    $localStorage.$inject = ['$window', '$location', '$cacheFactory'];\n    function $localStorage($window, $location, $cacheFactory) {\n\n        /**\n         * @private\n         * @description\n         * Create a prefix to be used by $window.localStorage\n         */\n        var prefix = $location.host().substring(0, $location.host().indexOf('.')) + '_',\n            webStorage,\n            oneDay = 24 * 60 * 60 * 1000,\n            cache = $cacheFactory(prefix + 'cache'),\n            service = this,\n            isLocalStorageAvailable = true;\n\n        /**\n         * @ngdoc method\n         * @name $localStorage.prefix\n         * @methodOf $localStorage\n         *\n         * @description\n         * Overrides the default domain prefix.\n         *\n         * <strong>N.B. Destroys the existing cache.</strong>\n         *\n         * @param {string} val The string to add to the persistent data prefix.\n         *\n         * @example\n         * ```js\n         * $localStorage.prefix('myPrefix');\n         * ```\n         */\n        service.prefix = function(val) {\n            prefix = val + '_';\n            cache.destroy();\n            cache = $cacheFactory(prefix + 'cache');\n        };\n\n        /**\n         * @ngdoc method\n         * @name $localStorage.put\n         * @methodOf $localStorage\n         *\n         * @description Add data to storage\n         *\n         * @param {string} key The key to store the data with.\n         * @param {*} value The data to store.\n         * [@param {number} expires] (expiry in days)\n         *\n         * @example\n         * ```js\n         * $localStorage.put('myKey', { data: 'my_data' });\n         * ```\n         */\n        service.put = function(key, value) {\n\n            var dataToStore = { data: value };\n\n            if (arguments.length > 2 && angular.isNumber(arguments[2])) {\n                dataToStore.expires = new Date().getTime() + (arguments[2] * oneDay);\n            }\n\n            cache.put(key, dataToStore);\n\n            if (isLocalStorageAvailable) {\n                webStorage.setItem(prefix + key, angular.toJson(dataToStore, false));\n            }\n\n            return value;\n        };\n\n        /**\n         * @ngdoc method\n         * @name $localStorage.get\n         * @methodOf $localStorage\n         *\n         * @description Get data from localStorage, will return from session cache if possible for greater performance.\n         *\n         * @param {String} key The key of the stored data to retrieve.\n         * @returns {*} The value of the stored data or undefined.\n         *\n         * @example\n         * ```js\n         * $localStorage.get('myKey');\n         * ```\n         */\n        service.get = function(key) {\n\n            var item;\n\n            if (cache.get(key)) {\n                item = cache.get(key);\n            }\n            else if (isLocalStorageAvailable) {\n                item = angular.fromJson(webStorage.getItem(prefix + key));\n            }\n\n            if (!item) {\n                return void 0;\n            }\n\n            if (item.expires && item.expires < new Date().getTime()) {\n                service.remove(key);\n                return void 0;\n            }\n\n            cache.put(key, item);\n\n            return item.data;\n        };\n\n        /**\n         * @ngdoc method\n         * @name $localStorage.remove\n         * @methodOf $localStorage\n         *\n         * @descriotion Remove data from storage.\n         *\n         * @param {String} key The key of the stored data to remove.\n         *\n         * @example\n         * ```js\n         * $localStorage.remove('myKey');\n         * ```\n         */\n        service.remove = function(key) {\n            service.put(key, void 0);\n            if (isLocalStorageAvailable) {\n                webStorage.removeItem(prefix + key);\n            }\n            cache.remove(key);\n        };\n\n        /**\n         * @ngdoc method\n         * @name $localStorage.empty\n         * @methodOf $localStorage\n         *\n         * @description Delete all data from session storage and localStorage.\n         *\n         * @example\n         * ```js\n         * $localStorage.empty();\n         * ```\n         */\n        service.empty = function() {\n            if (isLocalStorageAvailable) {\n                webStorage.clear();\n            }\n            cache.removeAll();\n        };\n\n        /**\n         * @private\n         * @description\n         * Check for $window.localStorage availability and functionality\n         */\n        (function() {\n\n            // Some browsers will return true when in private browsing mode so test to make sure it's functional.\n            try {\n                webStorage = $window.localStorage;\n                var key = 'swxTest_' + Math.round(Math.random() * 1e7);\n                webStorage.setItem(key, 'test');\n                webStorage.removeItem(key);\n            }\n            catch (e) {\n                isLocalStorageAvailable = false;\n            }\n\n        })();\n    }\n\n    /**\n     * @ngdoc overview\n     * @name swxLocalStorage\n     * @description\n     * $localStorage service for use in your AngularJS applications.\n     *\n     * Provides a key-value (string-object) storage, that is backed by localStorage with support for expiry (in days).\n     * Objects put or retrieved from this storage are automatically serialized or deserialized by angular's toJson/fromJson.\n     */\n    angular\n        .module('swxLocalStorage', [])\n        .service('$localStorage', $localStorage);\n\n})(window.angular);"],"sourceRoot":"/source/"}