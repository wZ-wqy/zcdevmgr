<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd"
	   default-lazy-init="true">

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		  class="com.dt.core.shiro.RetryLimitSimpleCredentialsMatcher">
		<constructor-arg ref="shiroCacheManager" />
		<property name="limitretryCount" value="12" />
	</bean>

	<!-- 項目自定义的Realm -->
	<bean id="myShiroRealm" class="com.dt.core.shiro.ShiroDbRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher" />
		<!--开启缓存-->
		<property name="cachingEnabled" value="true" />
		<!--配置授权缓存-->
		<property name="authorizationCacheName" value="authorizationCache" />
		<property name="authorizationCachingEnabled" value="true" />
		<!--配置验证缓存-->
		<property name="authenticationCacheName" value="authenticationCache" />
		<property name="authenticationCachingEnabled" value="true" />
	</bean>

	<!-- 配置shiro session 的一个管理器 -->
	<!-- <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.MemorySessionDAO"></bean> -->
	<bean id="sessionDAO"
		  class="com.dt.core.shiro.session.SessionEntityDao"></bean>

	<!-- 定义一个会话Cookie模板 -->
	<bean id="sessionIdCookie"
		  class="org.apache.shiro.web.servlet.SimpleCookie">
		<property name="name" value="APPSESSIONID" />
		<property name="httpOnly" value="true" />
		<!-- 设置cookies过期时间,-1为关闭浏览器就过期,2592000 -->
		<property name="maxAge" value="2592000" />
	</bean>

	<bean id="rememberMeCookie"
		  class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="name" value="RM_SESSIONID" />
		<property name="httpOnly" value="true" />
		<property name="maxAge" value="2592000" /><!-- 30天 -->
	</bean>

	<!-- rememberMe管理器, cipherKey是加密rememberMe Cookie的密钥；默认AES算法 -->
	<bean id="rememberMeManager"
		  class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey"
				  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>

	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler"
		  class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		<property name="interval" value="600000" /><!--检测时间间距，默认是60分钟，600000 -->
		<property name="sessionManager" ref="sessionManager" />
	</bean>

	<!-- 会话Session ID生成器 -->
	<bean id="sessionIdGenerator"
		  class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
	<!-- 用于Web环境的实现，可以替代ServletContainerSessionManager，自己维护着会话，直接废弃了Servlet容器的会话管理 -->
	<!-- <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager"> -->

	<bean id="sessionManager"
		  class="com.dt.core.shiro.session.DtWebSessionManager">
		<!-- 相隔多久检查一次session的有效性，600s 10分钟 -->
		<property name="sessionValidationInterval" value="600000" />
		<!-- session 有效时间为半小时 （毫秒单位）,此操作会覆盖web.xml文件中的超时时间配置,7200,2销售 -->
		<property name="globalSessionTimeout" value="7200000" />
		<!-- 定义Session可以进行序列化的工具类 -->
		<property name="sessionDAO" ref="sessionDAO"></property>
		<!-- 去掉 JSESSIONID -->
		<property name="sessionIdUrlRewritingEnabled" value="false" />
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="sessionValidationScheduler"
				  ref="sessionValidationScheduler" />
		<!-- 是否开启 检测，默认开启 -->
		<property name="sessionValidationSchedulerEnabled"
				  value="true" />
		<!-- 删除所有无效的Session对象，此时的session被保存在了内存里面,默认开启 -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 会话模版 所有的session一定要将id设置到Cookie之中，需要提供有Cookie的操作模版 -->
		<property name="sessionIdCookie" ref="sessionIdCookie" />
		<property name="sessionIdCookieEnabled" value="true" />

	</bean>


	<!-- 用户授权信息Cache,shiro自定的本机内存实现的cacheManager类,后期不满足要求可以自己实现 -->
	<bean id="shiroCacheManager"
		  class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile"
				  value="classpath:shiro-ehcache.xml" />
		<!-- 配置Cache Manager为单例 -->
		<property name="cacheManager" ref="coreCacheManager" />
	</bean>

	<!-- 配置Cache Manager为单例 ,使用CacheManager类的静态方法create()创建对象，create()方法会检查当前环境下是否已经存在CacheManager对象，如果存在则直接返回该对象，否则创建一个新的对象-->
	<bean id="coreCacheManager" class="net.sf.ehcache.CacheManager" factory-method="create" />


	<!-- 配置SecurityManager的管理 -->
	<bean id="securityManager"
		  class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myShiroRealm" />
		<!--把cacheManager统一注入到SecurityManager中-->
		<property name="cacheManager" ref="shiroCacheManager" />
		<!-- 注入session管理器 -->
		<property name="sessionManager" ref="sessionManager"></property>
		<property name="rememberMeManager" ref="rememberMeManager" />
	</bean>


	<!-- Shiro Filter -->
	<bean id="shiroFilter"
		  class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 没有登录的用户请求需要登录的页面时自动跳转到登录页面，可配置也可不配置 -->
		<property name="loginUrl" value="/console/#/login" />
		<!-- 登录成功默认跳转页面，不配置则跳转至”/”，一般可以不配置，直接通过代码进行处理 -->
		<property name="successUrl" value="/dt/console/" />
		<!-- 没有权限默认跳转的页面 -->
		<property name="unauthorizedUrl"
				  value="/common/unauthorized.html" />
		<!-- anon 不需要认证, authc 需要认证, user 验证通过或RememberMe登录的都可以 -->
		<property name="filters">
			<map>
				<entry key="authc">
					<bean class="com.dt.core.shiro.MyAuthenticationFilter">
						<property name="rememberMeParam" value="rememberMe" />
					</bean>
				</entry>
				<entry key="perms">
					<bean class="com.dt.core.shiro.UrlPermissionsFilter" />
				</entry>
				<entry key="logout">
					<bean class="com.dt.core.shiro.SystemLogoutFilter" />
				</entry>
			</map>
		</property>
	</bean>

	<!--	/** = user  authentication=true||remember=true 都要可以访问-->
	<!-- 权限资源配置 -->
	<bean id="chainDefinitionSectionMetaSource"
		  class="com.dt.core.shiro.service.SimpleFilterChainDefinitionsService">
		<property name="filterChainDefinitions">
			<value>
				/uflo/** = anon
				/api/user/login.do = anon
				/api/user/logout.do =logout
				/console/** = anon
				/kn/** = anon
				/common/** = anon
				/public/** = anon
				/api/** = authc,perms
				/** = authc
			</value>
		</property>
	</bean>



	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor"
		  class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- AOP式方法级权限检查 -->
	<bean
			class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
			depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>


	<bean
			class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>

	<bean
			class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="staticMethod"
				  value="com.dt.core.shiro.service.ShiroAuthorizationHelper.setCacheManager" />
		<property name="arguments" ref="shiroCacheManager" />
	</bean>

</beans>